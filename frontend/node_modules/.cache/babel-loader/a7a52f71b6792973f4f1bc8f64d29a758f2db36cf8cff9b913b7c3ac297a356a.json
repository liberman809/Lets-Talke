{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\projects\\\\lets talke\\\\frontend\\\\src\\\\components\\\\chatManage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { findUser } from '../store/userActions';\nimport { AddUser } from './addUser';\nimport { Participant } from './participant';\nimport { updateChat, resetGroup } from '../store/chatActions';\nimport { updateUser, updateSomeUser } from '../store/userActions';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChatManage({\n  setMod,\n  setUserId\n}) {\n  _s();\n  console.log('new ChatManage');\n  const user = useSelector(state => state.userModule);\n  const activeChat = useSelector(state => state.chatModule);\n  const [participantsList, setParticipants] = useState([]);\n  useEffect(() => {\n    getMmbers();\n  }, [activeChat]);\n  async function getMmbers() {\n    try {\n      console.log('activeChat.participants', activeChat.participants);\n      const membersNames = [];\n      for (let member in activeChat.participants) {\n        const user = await findUser(activeChat.participants[member]);\n        user.isManager = false;\n        if (activeChat.managers.includes(user._id)) user.isManager = true;\n        membersNames.push(user);\n      }\n      setParticipants(membersNames);\n    } catch (err) {}\n  }\n  async function leaveGroup() {\n    try {\n      const participantsListUpdat = activeChat.participants.filter(participant => participant != user.userId);\n      let managersUpdat;\n      if (activeChat.managers.includes(user.userId) && participantsListUpdat.length != 0) {\n        managersUpdat = activeChat.managers.filter(manager => manager != user.userId);\n        if (managersUpdat.length == 0) {\n          managersUpdat.push(activeChat.participants[0]);\n        }\n      }\n      //update user\n      const userChatUpdat = user.userChats.filter(chat => chat.chatId != activeChat.chatId);\n      const updatParticipants = {\n        participants: participantsListUpdat\n      };\n      const updatManagers = {\n        managers: managersUpdat\n      };\n      const updatChats = {\n        chats: userChatUpdat\n      };\n      const updateParticipantsChat = await updateChat(activeChat.chatId, updatParticipants);\n      const updatChatManagers = await updateChat(activeChat.chatId, updatManagers);\n      const updateUserChats = await updateUser(user.userId, updatChats);\n      resetGroup();\n      // setMod('chat')\n    } catch (err) {}\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatManage\",\n    children: [activeChat.type == 'group' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"groupDescription\",\n        children: activeChat.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), activeChat.managers.includes(user.userId) && /*#__PURE__*/_jsxDEV(AddUser, {\n        participantsList: participantsList,\n        setParticipants: setParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participantsList\",\n        children: participantsList.map(member => {\n          return /*#__PURE__*/_jsxDEV(Participant, {\n            member: member,\n            setMod: setMod,\n            setUserId: setUserId\n          }, member._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groupActions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => leaveGroup(),\n        children: \"leave group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"By clicking you will leave the group and it will be deleted from your chat list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n}\n_s(ChatManage, \"941KiScBjHUQ87cIh0vKh5DGuLc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = ChatManage;\nvar _c;\n$RefreshReg$(_c, \"ChatManage\");","map":{"version":3,"names":["useEffect","useState","useSelector","findUser","AddUser","Participant","updateChat","resetGroup","updateUser","updateSomeUser","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatManage","setMod","setUserId","_s","console","log","user","state","userModule","activeChat","chatModule","participantsList","setParticipants","getMmbers","participants","membersNames","member","isManager","managers","includes","_id","push","err","leaveGroup","participantsListUpdat","filter","participant","userId","managersUpdat","length","manager","userChatUpdat","userChats","chat","chatId","updatParticipants","updatManagers","updatChats","chats","updateParticipantsChat","updatChatManagers","updateUserChats","className","children","type","description","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/projects/lets talke/frontend/src/components/chatManage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport {findUser} from '../store/userActions'\r\nimport {AddUser} from './addUser'\r\nimport {Participant} from './participant'\r\n\r\nimport {updateChat,resetGroup} from '../store/chatActions'\r\nimport {updateUser,updateSomeUser} from '../store/userActions'\r\n\r\nexport function ChatManage({setMod,setUserId}){\r\n\r\n    console.log('new ChatManage')\r\n    const user = useSelector(state => state.userModule )\r\n    const activeChat = useSelector(state => state.chatModule )\r\n    const [participantsList,setParticipants] = useState([])  \r\n\r\n\r\n    useEffect(() =>{\r\n        getMmbers()\r\n    },[activeChat])\r\n\r\n    async function getMmbers(){\r\n        try{\r\n            console.log('activeChat.participants',activeChat.participants)\r\n            const membersNames = []\r\n            for(let member in activeChat.participants){\r\n                const user = await findUser(activeChat.participants[member])\r\n                user.isManager = false\r\n                if(activeChat.managers.includes(user._id)) user.isManager = true\r\n                membersNames.push(user)\r\n            }\r\n            setParticipants(membersNames)\r\n        }catch(err){}\r\n    }\r\n\r\n    async function leaveGroup() {\r\n        try{\r\n            const participantsListUpdat =  activeChat.participants.filter((participant) => participant != user.userId)\r\n            let managersUpdat\r\n            if(activeChat.managers.includes(user.userId) && participantsListUpdat.length != 0){\r\n                managersUpdat = activeChat.managers.filter((manager) => manager !=user.userId)\r\n                if(managersUpdat.length  == 0){\r\n                    managersUpdat.push(activeChat.participants[0])\r\n                }\r\n            }\r\n            //update user\r\n            const userChatUpdat = user.userChats.filter((chat) => chat.chatId != activeChat.chatId) \r\n    \r\n            const updatParticipants = {\r\n                participants:participantsListUpdat\r\n            }\r\n            const updatManagers = {\r\n                managers:managersUpdat\r\n            }\r\n            const updatChats = {\r\n                chats:userChatUpdat\r\n            }\r\n    \r\n            const updateParticipantsChat = await updateChat(activeChat.chatId,updatParticipants)\r\n            const updatChatManagers = await updateChat(activeChat.chatId,updatManagers)\r\n            const updateUserChats =  await updateUser(user.userId,updatChats)\r\n            resetGroup()\r\n            // setMod('chat')\r\n        }catch(err){}\r\n    }\r\n\r\n    return <div className='chatManage'>\r\n        {(activeChat.type == 'group' &&\r\n            <>\r\n            <div className='groupDescription'>\r\n                {activeChat.description}\r\n            </div>\r\n            {(activeChat.managers.includes(user.userId) &&\r\n                <AddUser participantsList={participantsList} setParticipants={setParticipants} />\r\n            )}\r\n            <div className='participantsList'>\r\n                {            \r\n                participantsList.map((member) => {\r\n                    return <Participant key={member._id} member={member} setMod={setMod} setUserId={setUserId} />\r\n                })     \r\n                }\r\n            </div>\r\n            \r\n            </>\r\n        )}\r\n\r\n        <div className='groupActions'>\r\n            <button onClick={() => leaveGroup()}>leave group</button>\r\n            <div>By clicking you will leave the group and it will be deleted from your chat list</div>\r\n        </div>\r\n    </div>\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}