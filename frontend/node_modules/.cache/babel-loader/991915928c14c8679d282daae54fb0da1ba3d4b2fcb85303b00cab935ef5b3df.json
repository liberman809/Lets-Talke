{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\projects\\\\lets talke\\\\frontend\\\\src\\\\components\\\\participant.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { updateChat, resetGroup } from '../store/chatActions';\nimport { updateSomeUser } from '../store/userActions';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Participant({\n  participant,\n  setMod,\n  setUserId\n}) {\n  _s();\n  const user = useSelector(state => state.userModule);\n  const activeChat = useSelector(state => state.chatModule);\n  console.log('activeChat', activeChat);\n  const [isManager, setIsManager] = useState(false);\n  useEffect(() => {\n    activeChat.managers.map(manager => {\n      if (manager.id === participant.id) {\n        setIsManager(true);\n      }\n    });\n    const manager = activeChat.managers.find(manager => manager.id === participant.id);\n    console.log('participant.name', participant.name, 'check', manager === undefined);\n  }, [activeChat]);\n  async function removeFromGroup(userId, memberChats) {\n    try {\n      const updateParticipantsList = activeChat.participants.filter(participant => participant != userId);\n      const userChatUpdat = memberChats.filter(chat => chat.chatId != activeChat.chatId);\n      const updatParticipants = {\n        participants: updateParticipantsList\n      };\n      const updatChats = {\n        chats: userChatUpdat\n      };\n      const updateParticipantsChat = await updateChat(activeChat.chatId, updatParticipants);\n      const updateUserChats = await updateSomeUser(userId, updatChats);\n    } catch (err) {}\n  }\n  async function addAsManager() {\n    try {\n      const updateChatManagers = [...activeChat.managers, {\n        id: participant.id,\n        name: participant.name\n      }];\n      const updatParticipants = {\n        managers: updateChatManagers\n      };\n      const updateParticipantsChat = await updateChat(activeChat.chatId, updatParticipants);\n    } catch (err) {}\n  }\n  async function removeAsManager() {\n    try {\n      const updateChatManagers = activeChat.managers.filter(manager => manager.id != participant.id);\n      const updatParticipants = {\n        managers: updateChatManagers\n      };\n      const updateParticipantsChat = await updateChat(activeChat.chatId, updatParticipants);\n    } catch (err) {}\n  }\n  function userDetails(userId) {\n    setMod('user');\n    setUserId(userId);\n  }\n  console.log(participant.id, isManager);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participantDetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => userDetails(participant.id),\n        children: participant.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: participant.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), isManager ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 28\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Member\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 47\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participantActions\",\n      children: [!isManager && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"actionButton\",\n          onClick: () => removeFromGroup(participant.id, participant.chats),\n          children: \"Remove from group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"actionButton\",\n          onClick: () => addAsManager(),\n          children: \"Add as manager\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), isManager && participant.id != user.userId && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"actionButton\",\n        onClick: () => removeAsManager(),\n        children: \"Remove as manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n}\n_s(Participant, \"ZIwxAwzSJ64P44q7ZQDheD9Yzfo=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Participant;\nvar _c;\n$RefreshReg$(_c, \"Participant\");","map":{"version":3,"names":["useEffect","useState","useSelector","updateChat","resetGroup","updateSomeUser","jsxDEV","_jsxDEV","Fragment","_Fragment","Participant","participant","setMod","setUserId","_s","user","state","userModule","activeChat","chatModule","console","log","isManager","setIsManager","managers","map","manager","id","find","name","undefined","removeFromGroup","userId","memberChats","updateParticipantsList","participants","filter","userChatUpdat","chat","chatId","updatParticipants","updatChats","chats","updateParticipantsChat","updateUserChats","err","addAsManager","updateChatManagers","removeAsManager","userDetails","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","email","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/projects/lets talke/frontend/src/components/participant.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport {updateChat,resetGroup} from '../store/chatActions'\r\nimport {updateSomeUser} from '../store/userActions'\r\n\r\nexport function Participant({participant,setMod,setUserId}){\r\n\r\n    const user = useSelector(state => state.userModule )\r\n    const activeChat = useSelector(state => state.chatModule )\r\n\r\n    console.log('activeChat',activeChat)\r\n    const [isManager,setIsManager] = useState(false)\r\n\r\n    useEffect(() => {\r\n        activeChat.managers.map((manager) => {\r\n            if(manager.id === participant.id){\r\n                setIsManager(true)\r\n            }\r\n        })\r\n\r\n        const manager = activeChat.managers.find((manager) => manager.id === participant.id)\r\n        console.log('participant.name',participant.name,'check',manager === undefined)\r\n    },[activeChat])\r\n\r\n\r\n\r\n    async function removeFromGroup(userId,memberChats){\r\n        try{\r\n            const updateParticipantsList = activeChat.participants.filter((participant) => participant !=userId)\r\n            const userChatUpdat = memberChats.filter((chat) => chat.chatId != activeChat.chatId) \r\n\r\n            const updatParticipants = {\r\n                participants: updateParticipantsList \r\n            }\r\n            const updatChats = {\r\n                chats:userChatUpdat\r\n            }\r\n            const updateParticipantsChat = await updateChat(activeChat.chatId,updatParticipants)\r\n            const updateUserChats =  await updateSomeUser(userId,updatChats)\r\n        }catch(err){}\r\n    }\r\n\r\n    async function addAsManager(){\r\n        try{\r\n            const updateChatManagers = [...activeChat.managers,{id:participant.id,name:participant.name}]\r\n            const updatParticipants = {\r\n                managers: updateChatManagers \r\n            }\r\n            const updateParticipantsChat = await updateChat(activeChat.chatId,updatParticipants)\r\n        }catch(err){}\r\n\r\n    }\r\n\r\n    async function removeAsManager(){\r\n        try{\r\n            const updateChatManagers = activeChat.managers.filter((manager) => manager.id != participant.id)\r\n            const updatParticipants = {\r\n                managers: updateChatManagers \r\n            }\r\n            const updateParticipantsChat = await updateChat(activeChat.chatId,updatParticipants)\r\n        }catch(err){}\r\n\r\n    }\r\n\r\n    function userDetails(userId){\r\n        setMod('user') \r\n        setUserId(userId)\r\n    }\r\n\r\n    console.log(participant.id,isManager)\r\n\r\n    return <div className='participant'>\r\n        <div className='participantDetails'>\r\n            <div onClick={() => userDetails(participant.id)}>{participant.name}</div>\r\n            <div>{participant.email}</div>\r\n        </div>\r\n            {\r\n               (isManager)?<div>Manager</div>:<div>Member</div>\r\n            }\r\n            <div className='participantActions'>\r\n                {(!isManager &&\r\n                    <>\r\n                    <button className='actionButton' onClick={() => removeFromGroup(participant.id,participant.chats)}>Remove from group</button>\r\n                    <button className='actionButton' onClick={() => addAsManager()}>Add as manager</button>\r\n                    </>\r\n                )}\r\n                {((isManager && participant.id != user.userId) &&\r\n                    <button className='actionButton'  onClick={() => removeAsManager()}>Remove as manager</button>\r\n                )}\r\n            </div>\r\n    </div>\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAAQC,UAAU,EAACC,UAAU,QAAO,sBAAsB;AAC1D,SAAQC,cAAc,QAAO,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,OAAO,SAASC,WAAWA,CAAC;EAACC,WAAW;EAACC,MAAM;EAACC;AAAS,CAAC,EAAC;EAAAC,EAAA;EAEvD,MAAMC,IAAI,GAAGb,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACC,UAAW,CAAC;EACpD,MAAMC,UAAU,GAAGhB,WAAW,CAACc,KAAK,IAAIA,KAAK,CAACG,UAAW,CAAC;EAE1DC,OAAO,CAACC,GAAG,CAAC,YAAY,EAACH,UAAU,CAAC;EACpC,MAAM,CAACI,SAAS,EAACC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZkB,UAAU,CAACM,QAAQ,CAACC,GAAG,CAAEC,OAAO,IAAK;MACjC,IAAGA,OAAO,CAACC,EAAE,KAAKhB,WAAW,CAACgB,EAAE,EAAC;QAC7BJ,YAAY,CAAC,IAAI,CAAC;MACtB;IACJ,CAAC,CAAC;IAEF,MAAMG,OAAO,GAAGR,UAAU,CAACM,QAAQ,CAACI,IAAI,CAAEF,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKhB,WAAW,CAACgB,EAAE,CAAC;IACpFP,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACV,WAAW,CAACkB,IAAI,EAAC,OAAO,EAACH,OAAO,KAAKI,SAAS,CAAC;EAClF,CAAC,EAAC,CAACZ,UAAU,CAAC,CAAC;EAIf,eAAea,eAAeA,CAACC,MAAM,EAACC,WAAW,EAAC;IAC9C,IAAG;MACC,MAAMC,sBAAsB,GAAGhB,UAAU,CAACiB,YAAY,CAACC,MAAM,CAAEzB,WAAW,IAAKA,WAAW,IAAGqB,MAAM,CAAC;MACpG,MAAMK,aAAa,GAAGJ,WAAW,CAACG,MAAM,CAAEE,IAAI,IAAKA,IAAI,CAACC,MAAM,IAAIrB,UAAU,CAACqB,MAAM,CAAC;MAEpF,MAAMC,iBAAiB,GAAG;QACtBL,YAAY,EAAED;MAClB,CAAC;MACD,MAAMO,UAAU,GAAG;QACfC,KAAK,EAACL;MACV,CAAC;MACD,MAAMM,sBAAsB,GAAG,MAAMxC,UAAU,CAACe,UAAU,CAACqB,MAAM,EAACC,iBAAiB,CAAC;MACpF,MAAMI,eAAe,GAAI,MAAMvC,cAAc,CAAC2B,MAAM,EAACS,UAAU,CAAC;IACpE,CAAC,QAAMI,GAAG,EAAC,CAAC;EAChB;EAEA,eAAeC,YAAYA,CAAA,EAAE;IACzB,IAAG;MACC,MAAMC,kBAAkB,GAAG,CAAC,GAAG7B,UAAU,CAACM,QAAQ,EAAC;QAACG,EAAE,EAAChB,WAAW,CAACgB,EAAE;QAACE,IAAI,EAAClB,WAAW,CAACkB;MAAI,CAAC,CAAC;MAC7F,MAAMW,iBAAiB,GAAG;QACtBhB,QAAQ,EAAEuB;MACd,CAAC;MACD,MAAMJ,sBAAsB,GAAG,MAAMxC,UAAU,CAACe,UAAU,CAACqB,MAAM,EAACC,iBAAiB,CAAC;IACxF,CAAC,QAAMK,GAAG,EAAC,CAAC;EAEhB;EAEA,eAAeG,eAAeA,CAAA,EAAE;IAC5B,IAAG;MACC,MAAMD,kBAAkB,GAAG7B,UAAU,CAACM,QAAQ,CAACY,MAAM,CAAEV,OAAO,IAAKA,OAAO,CAACC,EAAE,IAAIhB,WAAW,CAACgB,EAAE,CAAC;MAChG,MAAMa,iBAAiB,GAAG;QACtBhB,QAAQ,EAAEuB;MACd,CAAC;MACD,MAAMJ,sBAAsB,GAAG,MAAMxC,UAAU,CAACe,UAAU,CAACqB,MAAM,EAACC,iBAAiB,CAAC;IACxF,CAAC,QAAMK,GAAG,EAAC,CAAC;EAEhB;EAEA,SAASI,WAAWA,CAACjB,MAAM,EAAC;IACxBpB,MAAM,CAAC,MAAM,CAAC;IACdC,SAAS,CAACmB,MAAM,CAAC;EACrB;EAEAZ,OAAO,CAACC,GAAG,CAACV,WAAW,CAACgB,EAAE,EAACL,SAAS,CAAC;EAErC,oBAAOf,OAAA;IAAK2C,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC/B5C,OAAA;MAAK2C,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAC/B5C,OAAA;QAAK6C,OAAO,EAAEA,CAAA,KAAMH,WAAW,CAACtC,WAAW,CAACgB,EAAE,CAAE;QAAAwB,QAAA,EAAExC,WAAW,CAACkB;MAAI;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACzEjD,OAAA;QAAA4C,QAAA,EAAMxC,WAAW,CAAC8C;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EAEElC,SAAS,gBAAEf,OAAA;MAAA4C,QAAA,EAAK;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAACjD,OAAA;MAAA4C,QAAA,EAAK;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEnDjD,OAAA;MAAK2C,SAAS,EAAC,oBAAoB;MAAAC,QAAA,GAC7B,CAAC7B,SAAS,iBACRf,OAAA,CAAAE,SAAA;QAAA0C,QAAA,gBACA5C,OAAA;UAAQ2C,SAAS,EAAC,cAAc;UAACE,OAAO,EAAEA,CAAA,KAAMrB,eAAe,CAACpB,WAAW,CAACgB,EAAE,EAAChB,WAAW,CAAC+B,KAAK,CAAE;UAAAS,QAAA,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7HjD,OAAA;UAAQ2C,SAAS,EAAC,cAAc;UAACE,OAAO,EAAEA,CAAA,KAAMN,YAAY,CAAC,CAAE;UAAAK,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACrF,CAAC,EAEJlC,SAAS,IAAIX,WAAW,CAACgB,EAAE,IAAIZ,IAAI,CAACiB,MAAM,iBACzCzB,OAAA;QAAQ2C,SAAS,EAAC,cAAc;QAAEE,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAAC,CAAE;QAAAG,QAAA,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEjG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AACV;AAAC1C,EAAA,CAtFeJ,WAAW;EAAA,QAEVR,WAAW,EACLA,WAAW;AAAA;AAAAwD,EAAA,GAHlBhD,WAAW;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}