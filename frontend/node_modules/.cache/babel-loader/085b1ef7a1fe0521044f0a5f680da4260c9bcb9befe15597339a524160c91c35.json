{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\projects\\\\lets talke\\\\frontend\\\\src\\\\components\\\\chatManage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { findUser } from '../store/userActions';\nimport { AddUser } from './addUser';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ChatManage() {\n  _s();\n  const user = useSelector(state => state.userModule);\n  const activeChat = useSelector(state => state.chatModule);\n  const [participantsList, setParticipants] = useState([]);\n  console.log('participantsList');\n  useEffect(() => {\n    getMmbers();\n  }, []);\n  async function getMmbers() {\n    try {\n      const membersNames = [];\n      for (let member in activeChat.participants) {\n        // console.log(chat.managers)\n        const user = await findUser(activeChat.participants[member]);\n        membersNames.push(user.name);\n      }\n      setParticipants(membersNames);\n    } catch (err) {}\n  }\n  async function leaveGroup() {\n    const participantsListUpdat = activeChat.participants.filter(participant => participant != user.userId);\n    const updat = {\n      participants: participantsListUpdat\n    };\n\n    //update user\n    const userChatUpdat = user.userChats.filter(chat => chat.chatId != activeChat.chatId);\n    console.log('userChatUpdat', userChatUpdat);\n    if (activeChat.managers.includes(user.userId) && participantsListUpdat.length != 0) {\n      const managersUpdat = activeChat.managers.filter(manager => manager != user.userId);\n      if (managersUpdat.length == 0) {\n        console.log('managersUpdat', managersUpdat);\n        managersUpdat.push(activeChat.participants[0]);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [activeChat.type == 'group' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(AddUser, {\n        participantsList: participantsList,\n        setParticipants: setParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), participantsList.map(member => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"HedaerUser\",\n          children: member\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groupActions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => leaveGroup(),\n        children: \"leave group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"By clicking you will leave the group and it will be deleted from your chat list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n}\n_s(ChatManage, \"941KiScBjHUQ87cIh0vKh5DGuLc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = ChatManage;\nvar _c;\n$RefreshReg$(_c, \"ChatManage\");","map":{"version":3,"names":["useEffect","useState","useSelector","findUser","AddUser","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatManage","_s","user","state","userModule","activeChat","chatModule","participantsList","setParticipants","console","log","getMmbers","membersNames","member","participants","push","name","err","leaveGroup","participantsListUpdat","filter","participant","userId","updat","userChatUpdat","userChats","chat","chatId","managers","includes","length","managersUpdat","manager","children","type","fileName","_jsxFileName","lineNumber","columnNumber","map","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Desktop/projects/lets talke/frontend/src/components/chatManage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport {findUser} from '../store/userActions'\r\nimport {AddUser} from './addUser'\r\n\r\nexport function ChatManage(){\r\n\r\n    const user = useSelector(state => state.userModule )\r\n    const activeChat = useSelector(state => state.chatModule )\r\n    const [participantsList,setParticipants] = useState([])  \r\n\r\n    console.log('participantsList',)\r\n\r\n    useEffect(() =>{\r\n        getMmbers()\r\n    },[])\r\n\r\n    async function getMmbers(){\r\n        try{\r\n            const membersNames = []\r\n            for(let member in activeChat.participants){\r\n                // console.log(chat.managers)\r\n                const user = await findUser(activeChat.participants[member])\r\n                membersNames.push(user.name)\r\n            }\r\n            setParticipants(membersNames)\r\n        }catch(err){}\r\n    }\r\n\r\n    async function leaveGroup() {\r\n        const participantsListUpdat =  activeChat.participants.filter((participant) => participant != user.userId)\r\n\r\n        const updat = {\r\n            participants:participantsListUpdat\r\n        }\r\n\r\n        //update user\r\n        const userChatUpdat = user.userChats.filter((chat) => chat.chatId != activeChat.chatId) \r\n        console.log('userChatUpdat',userChatUpdat)\r\n\r\n        if(activeChat.managers.includes(user.userId) && participantsListUpdat.length != 0){\r\n            const managersUpdat = activeChat.managers.filter((manager) => manager !=user.userId)\r\n            if(managersUpdat.length  == 0){\r\n                console.log('managersUpdat',managersUpdat)\r\n                managersUpdat.push(activeChat.participants[0])\r\n            }\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        {(activeChat.type == 'group' &&\r\n            <>\r\n            <AddUser participantsList={participantsList} setParticipants={setParticipants} />\r\n            {            \r\n                participantsList.map((member) => {\r\n                    return <div className='HedaerUser'>{member}</div>\r\n                })     \r\n            }\r\n            </>\r\n        )}\r\n\r\n        <div className='groupActions'>\r\n            <button onClick={() => leaveGroup()}>leave group</button>\r\n            <div>By clicking you will leave the group and it will be deleted from your chat list</div>\r\n        </div>\r\n    </div>\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}